/* 从 030 项目的 styles/main.css 中提取星空背景相关的样式 */
#universe {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -2;
  background: radial-gradient(ellipse at bottom, #1B2735 0%, #090A0F 100%);
}

/* 确保其他 canvas 层级正确 */
#canvas {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
}

body {
  margin: 0;
  padding: 0;
  overflow: hidden;
  background: #000;
}

.container {
  position: relative;
  z-index: 1;
}

.content {
  position: relative;
  z-index: 2;
}

/* filepath: d:\windows\Desktop\Luv1\my_love_code\034\js\universe.js */
/* 星空背景效果 - 从 030 项目移植 */
(function() {
    const canvas = document.getElementById('universe');
    const ctx = canvas.getContext('2d');
    
    let stars = [];
    let meteors = [];
    
    function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    }
    
    // 星星类
    class Star {
        constructor() {
            this.x = Math.random() * canvas.width;
            this.y = Math.random() * canvas.height;
            this.radius = Math.random() * 2;
            this.opacity = Math.random();
            this.twinkleSpeed = Math.random() * 0.02 + 0.01;
        }
        
        update() {
            this.opacity += this.twinkleSpeed;
            if (this.opacity > 1 || this.opacity < 0) {
                this.twinkleSpeed = -this.twinkleSpeed;
            }
            this.opacity = Math.max(0, Math.min(1, this.opacity));
        }
        
        draw() {
            ctx.save();
            ctx.globalAlpha = this.opacity;
            ctx.fillStyle = '#fff';
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
            ctx.fill();
            ctx.restore();
        }
    }
    
    // 流星类
    class Meteor {
        constructor() {
            this.x = Math.random() * canvas.width;
            this.y = -10;
            this.length = Math.random() * 80 + 10;
            this.speed = Math.random() * 5 + 2;
            this.opacity = 1;
            this.fade = Math.random() * 0.02 + 0.01;
        }
        
        update() {
            this.x += this.speed * 0.5;
            this.y += this.speed;
            this.opacity -= this.fade;
        }
        
        draw() {
            ctx.save();
            ctx.globalAlpha = this.opacity;
            
            const gradient = ctx.createLinearGradient(
                this.x, this.y,
                this.x - this.length * 0.5, this.y - this.length
            );
            gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');
            gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
            
            ctx.strokeStyle = gradient;
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.moveTo(this.x, this.y);
            ctx.lineTo(this.x - this.length * 0.5, this.y - this.length);
            ctx.stroke();
            ctx.restore();
        }
    }
    
    // 初始化星星
    function initStars() {
        stars = [];
        const starCount = Math.floor((canvas.width * canvas.height) / 8000);
        for (let i = 0; i < starCount; i++) {
            stars.push(new Star());
        }
    }
    
    // 创建流星
    function createMeteor() {
        if (Math.random() < 0.003) {
            meteors.push(new Meteor());
        }
    }
    
    // 动画循环
    function animate() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // 更新和绘制星星
        stars.forEach(star => {
            star.update();
            star.draw();
        });
        
        // 创建新流星
        createMeteor();
        
        // 更新和绘制流星
        meteors.forEach((meteor, index) => {
            meteor.update();
            meteor.draw();
            
            // 移除消失的流星
            if (meteor.opacity <= 0 || meteor.y > canvas.height + 100) {
                meteors.splice(index, 1);
            }
        });
        
        requestAnimationFrame(animate);
    }
    
    // 窗口大小改变时重新初始化
    window.addEventListener('resize', () => {
        resizeCanvas();
        initStars();
    });
    
    // 初始化
    resizeCanvas();
    initStars();
    animate();
})();